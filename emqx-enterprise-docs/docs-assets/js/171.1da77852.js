(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{1683:function(e,s,n){"use strict";n.r(s);var t=n(10),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"多语言-协议接入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多语言-协议接入"}},[e._v("#")]),e._v(" 多语言 - 协议接入")]),e._v(" "),t("p",[t("strong",[e._v("多语言 - 协议接入")]),e._v(" 由 "),t("strong",[e._v("emqx-exproto")]),e._v(" 插件提供，它允许其他编程语言（例如：Python，Java 等）直接处理字节数据报文实现自定义协议的解析，并提供 Pub/Sub 接口实现与系统的消息交换。")]),e._v(" "),t("p",[e._v("该功能给 EMQX 带来的扩展性十分的强大，它能以用户熟悉的编程语言处理任何的私有协议，并享受由 EMQX 系统带来的极高并发连接的优点。")]),e._v(" "),t("h2",{attrs:{id:"特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[e._v("#")]),e._v(" 特性")]),e._v(" "),t("ul",[t("li",[e._v("极强的扩展能力。使用 gRPC 作为 RPC 通信框架，支持各个主流编程语言")]),e._v(" "),t("li",[e._v("完全的异步 IO。连接层以完全的异步非阻塞式 I/O 的方式实现")]),e._v(" "),t("li",[e._v("连接层透明。完全的支持 TCP\\TLS UDP\\DTLS 类型的连接管理，并对上层提供统一个 API")]),e._v(" "),t("li",[e._v("连接管理能力。例如，最大连接数，连接和吞吐的速率限制，IP 黑名单等")])]),e._v(" "),t("h2",{attrs:{id:"架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[e._v("#")]),e._v(" 架构")]),e._v(" "),t("p",[t("img",{attrs:{src:n(962),alt:"Extension-Protocol Arch"}})]),e._v(" "),t("p",[e._v("该功能提供的接口包括：")]),e._v(" "),t("ol",[t("li",[t("p",[t("strong",[e._v("连接层：")]),e._v(" 该部分主要"),t("strong",[e._v("维持 Socket 的生命周期，和数据的收发")]),e._v("。它的功能要求包括：")]),e._v(" "),t("ul",[t("li",[e._v("监听某个端口。当有新的 TCP/UDP 连接到达后，启动一个连接进程，来维持连接的状态。")]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("OnSocketCreated")]),e._v(" 回调。用于通知外部模块"),t("strong",[e._v("已新建立了一个连接")]),e._v("。")]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("OnSocketClosed")]),e._v(" 回调。用于通知外部模块连接"),t("strong",[e._v("已关闭")]),e._v("。")]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("OnReceivedBytes")]),e._v(" 回调。用于通知外部模块"),t("strong",[e._v("该连接新收到的数据包")]),e._v("。")]),e._v(" "),t("li",[e._v("提供 "),t("code",[e._v("Send")]),e._v(" 接口。供外部模块调用，"),t("strong",[e._v("用于发送数据包")]),e._v("。")]),e._v(" "),t("li",[e._v("提供 "),t("code",[e._v("Close")]),e._v(" 接口。供外部模块调用，"),t("strong",[e._v("用于主动关闭连接")]),e._v("。")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("协议/会话层：")]),e._v(" 该部分主要"),t("strong",[e._v("提供 PUB/SUB 接口")]),e._v("，以实现与 EMQX Broker 系统的消息互通。包括：")]),e._v(" "),t("ul",[t("li",[e._v("提供 "),t("code",[e._v("Authenticate")]),e._v(" 接口。供外部模块调用，用于向集群注册客户端。")]),e._v(" "),t("li",[e._v("提供 "),t("code",[e._v("StartTimer")]),e._v(" 接口。供外部模块调用，用于为该连接进程启动心跳等定时器。")]),e._v(" "),t("li",[e._v("提供 "),t("code",[e._v("Publish")]),e._v(" 接口。供外部模块调用，用于发布消息 EMQX Broker 中。")]),e._v(" "),t("li",[e._v("提供 "),t("code",[e._v("Subscribe")]),e._v(" 接口。供外部模块调用，用于订阅某主题，以实现从 EMQX Broker 中接收某些下行消息。")]),e._v(" "),t("li",[e._v("提供 "),t("code",[e._v("Unsubscribe")]),e._v(" 接口。供外部模块调用，用于取消订阅某主题。")]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("OnTimerTimeout")]),e._v(" 回调。用于处理定时器超时的事件。")]),e._v(" "),t("li",[e._v("调用 "),t("code",[e._v("OnReceivedMessages")]),e._v(" 回调。用于接收下行消息（在订阅主题成功后，如果主题上有消息，便会回调该方法）")])])])]),e._v(" "),t("h2",{attrs:{id:"接口设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口设计"}},[e._v("#")]),e._v(" 接口设计")]),e._v(" "),t("p",[e._v("从 gRPC 的角度上看，ExProto 会作为客户端向 "),t("code",[e._v("ConnectionHandler")]),e._v(" 服务发送回调请求。同时，它也会作为服务端向外部模块提供 "),t("code",[e._v("ConnectionAdapter")]),e._v(" 服务，以提供 各类接口的调用。如图：")]),e._v(" "),t("p",[t("img",{attrs:{src:n(412),alt:"Extension Protocol gRPC Arch"}})]),e._v(" "),t("p",[e._v("详细的设计参见："),t("a",{attrs:{href:"https://github.com/emqx/emqx/blob/v4.3-beta.1/apps/emqx_exproto/priv/protos/exproto.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("exproto.proto"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("例如，其中接口的定义有：")]),e._v(" "),t("div",{staticClass:"language-protobuff line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('syntax = "proto3";\n\npackage emqx.exproto.v1;\n\n// The Broker side serivce. It provides a set of APIs to\n// handle a protcol access\nservice ConnectionAdapter {\n\n  // -- socket layer\n\n  rpc Send(SendBytesRequest) returns (CodeResponse) {};\n\n  rpc Close(CloseSocketRequest) returns (CodeResponse) {};\n\n  // -- protocol layer\n\n  rpc Authenticate(AuthenticateRequest) returns (CodeResponse) {};\n\n  rpc StartTimer(TimerRequest) returns (CodeResponse) {};\n\n  // -- pub/sub layer\n\n  rpc Publish(PublishRequest) returns (CodeResponse) {};\n\n  rpc Subscribe(SubscribeRequest) returns (CodeResponse) {};\n\n  rpc Unsubscribe(UnsubscribeRequest) returns (CodeResponse) {};\n}\n\nservice ConnectionHandler {\n\n  // -- socket layer\n\n  rpc OnSocketCreated(SocketCreatedRequest) returns (EmptySuccess) {};\n\n  rpc OnSocketClosed(SocketClosedRequest) returns (EmptySuccess) {};\n\n  rpc OnReceivedBytes(ReceivedBytesRequest) returns (EmptySuccess) {};\n\n  // -- pub/sub layer\n\n  rpc OnTimerTimeout(TimerTimeoutRequest) returns (EmptySuccess) {};\n\n  rpc OnReceivedMessages(ReceivedMessagesRequest) returns (EmptySuccess) {};\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br"),t("span",{staticClass:"line-number"},[e._v("42")]),t("br"),t("span",{staticClass:"line-number"},[e._v("43")]),t("br"),t("span",{staticClass:"line-number"},[e._v("44")]),t("br"),t("span",{staticClass:"line-number"},[e._v("45")]),t("br")])]),t("h2",{attrs:{id:"开发指南"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发指南"}},[e._v("#")]),e._v(" 开发指南")]),e._v(" "),t("p",[e._v("在使用该功能之前，用户需要开发和部署一个 gRPC 的服务，并实现 "),t("code",[e._v("exproto.proto")]),e._v(" 定义的接口。")]),e._v(" "),t("p",[e._v("其步骤如下：")]),e._v(" "),t("ol",[t("li",[e._v("拷贝出当前版本的 "),t("code",[e._v("lib/emqx_exproto-<x.y.z>/priv/protos/exproto.proto")]),e._v(" 文件。")]),e._v(" "),t("li",[e._v("使用对应编程语言的 gRPC 框架，生成 "),t("code",[e._v("exproto.proto")]),e._v(" 的 gRPC 服务端的代码。")]),e._v(" "),t("li",[e._v("实现 exproto.proto 当中 "),t("code",[e._v("ConnectionHandler")]),e._v(" 服务的接口。")])]),e._v(" "),t("p",[e._v("开发完成后，需将该服务部署到与 EMQX 能够通信的服务器上，并保证端口的开放。")]),e._v(" "),t("p",[e._v("其中各个语言的 gRPC 框架可参考："),t("a",{attrs:{href:"https://github.com/grpc-ecosystem/awesome-grpc",target:"_blank",rel:"noopener noreferrer"}},[e._v("grpc-ecosystem/awesome-grpc"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("我们也提供了常见编程语言的示例程序："),t("a",{attrs:{href:"https://github.com/emqx/emqx-extension-examples",target:"_blank",rel:"noopener noreferrer"}},[e._v("emqx-extension-examples"),t("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports},412:function(e,s,n){e.exports=n.p+"docs-assets/img/exproto-grpc-arch.b6feed73.jpg"},962:function(e,s,n){e.exports=n.p+"docs-assets/img/exproto-arch.b5b2e7d9.jpg"}}]);