(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{1475:function(e,t,s){"use strict";s.r(t);var a=s(10),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"jwt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jwt"}},[e._v("#")]),e._v(" JWT")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JWT"),s("OutboundLink")],1),e._v(" is a Token-based authentication mechanism. It does not rely on the server to retain client authentication information or session information. It can issue authentication information in batches while holding keys, which is an easiest authentication method.")]),e._v(" "),s("p",[e._v("Plugin:")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("emqx_auth_jwt\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"authentication-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#authentication-principle"}},[e._v("#")]),e._v(" Authentication principle")]),e._v(" "),s("p",[e._v("The client uses Token as the user name or password (depending on the plugin configuration). When initiating the connection, EMQX Broker uses the key and certificate in the configuration to decrypt. If it can be successfully decrypted, the authentication successes, otherwise the authentication fails.")]),e._v(" "),s("p",[e._v("After JWT authentication is enabled by default, you can connect with the following password and any username:")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImF1dGhvciI6IndpdndpdiIsInNpdGUiOiJodHRwczovL3dpdndpdi5jb20ifSwiZXhwIjoxNTgyMjU1MzYwNjQyMDAwMCwiaWF0IjoxNTgyMjU1MzYwfQ.FdyAx2fYahm6h3g47m88ttyINzptzKy_speimyUcma4\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"jwt-authorization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jwt-authorization"}},[e._v("#")]),e._v(" JWT Authorization")]),e._v(" "),s("p",[e._v("JWT authentication plugin can extract ACL rules from authentication tokens. These ACL rules will be later used\nto authorize client's actions. See "),s("RouterLink",{attrs:{to:"/en/enterprise/latest/advanced/acl-jwt.html"}},[e._v("JWT ACL")]),e._v(".")],1),e._v(" "),s("h2",{attrs:{id:"configuration-item"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-item"}},[e._v("#")]),e._v(" Configuration item")]),e._v(" "),s("p",[e._v("If you want to use JWT Auth you need open "),s("code",[e._v("etc/plugins/emqx_auth_jwt.conf")]),e._v(" and edit asï¼š")]),e._v(" "),s("p",[e._v("To enable JWT authentication, the following needs to be configured in "),s("code",[e._v("etc/plugins/emqx_auth_jwt.conf")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# etc/plugins/emqx_auth_jwt.conf")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Secret Key")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The key to verify the JWT Token using HMAC algorithm")]),e._v("\nauth.jwt.secret "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" emqxsecret\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## RSA or ECDSA public key file")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The public key file to verify the JWT Token using RSA or ECDSA algorithm")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#auth.jwt.pubkey = etc/certs/jwt_public_key.pem")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## JWKs server address")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## EMQX will get the key list from JWKs server and use it to verify the Token")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## About the JWKs, see: http://self-issued.info/docs/draft-ietf-jose-json-web-key.html")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#auth.jwt.jwks = https://127.0.0.1:8080/jwks")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## JWKs refresh interval")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#auth.jwt.jwks.refresh_interval = 5m")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The way the client carries the token")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Value: username | password")]),e._v("\nauth.jwt.from "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" password\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Enable to verify claims fields")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Value: on | off")]),e._v("\nauth.jwt.verify_claims "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" off\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The checklist of claims to validate")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Configuration format: auth.jwt.verify_claims.$name = $expected")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##   - $name: the name of the field in the JWT payload to be verified")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##   - $expected: the expected value")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## The available placeholders for $expected:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##   - %u: username")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##   - %c: clientid")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("##")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## For example, to verify that the username in the JWT payload is the same")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## as the client (MQTT protocol) username")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#auth.jwt.verify_claims.username = %u")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br")])]),s("h3",{attrs:{id:"auth-jwt-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auth-jwt-from"}},[e._v("#")]),e._v(" auth.jwt.from")]),e._v(" "),s("p",[e._v("The field where the client carries the JWT Token, used to configure where the client carries the JWT string, optional fields are username and password.")]),e._v(" "),s("h3",{attrs:{id:"auth-jwt-verify-claims"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#auth-jwt-verify-claims"}},[e._v("#")]),e._v(" auth.jwt.verify_claims")]),e._v(" "),s("p",[e._v("If you enable the "),s("code",[e._v("auth.jwt.verify_claims")]),e._v(" option, EMQXwill verify the validity of the data in the Payload after verifying the validity of the JWT.")]),e._v(" "),s("p",[e._v("suppose your Payload is:")]),e._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"username"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"emqx_client_username"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("You can use the following configuration to verify that client "),s("code",[e._v("username")]),e._v(" is "),s("strong",[e._v("equal to")]),e._v(" "),s("code",[e._v("emqx_client_username")]),e._v(" when the client carries this Token.")]),e._v(" "),s("div",{staticClass:"language-properties line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## Variables:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## - %u: username")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## - %c: clientid")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("auth.jwt.verify_claims.username")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("%u")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("Support for verification using fixed values or current client information:")]),e._v(" "),s("ul",[s("li",[e._v("%u: current client username")]),e._v(" "),s("li",[e._v("%c: current client client id")])]),e._v(" "),s("h2",{attrs:{id:"key-and-algorithm-support"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-and-algorithm-support"}},[e._v("#")]),e._v(" Key and Algorithm support")]),e._v(" "),s("p",[e._v("JWT authentication supports three ways to configure keys, which correspond to three types of algorithm support.")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("auth.jwt.secret")]),e._v(": a symmetric encryption method that validates the JWT Token field. It supports the following algorithms:")]),e._v(" "),s("ul",[s("li",[e._v("HS256 - HMAC, using the SHA-256 hash algorithm.")]),e._v(" "),s("li",[e._v("HS384 - HMAC, using the SHA-384 hash algorithm.")]),e._v(" "),s("li",[e._v("HS512 - HMAC, using the SHA-512 hash algorithm.")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("auth.jwt.pubkey")]),e._v(": authenticates the JWT Token field using asymmetric encryption. It supports the following algorithms.")]),e._v(" "),s("ul",[s("li",[e._v("RS256 - RSA, using the SHA-256 hash algorithm.")]),e._v(" "),s("li",[e._v("RS384 - RSA, using the SHA-384 hash algorithm.")]),e._v(" "),s("li",[e._v("RS512 - RSA, using the SHA-512 hash algorithm.")]),e._v(" "),s("li",[e._v("ES256 - ECDSA, using the P-256 curve.")]),e._v(" "),s("li",[e._v("ES384 - ECDSA, using the P-384 curve.")]),e._v(" "),s("li",[e._v("ES512 - ECDSA, using the P-512 curve.")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("auth.jwt.jwks")]),e._v(": configured as "),s("a",{attrs:{href:"http://self-issued.info/docs/draft-ietf-jose-json-web-key.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("JWKs"),s("OutboundLink")],1),e._v(" server address to get the list of available keys from the JWKs server.")])])]),e._v(" "),s("p",[e._v("The three types of keys are allowed to be configured simultaneously. EMQX checks the Token in the order of "),s("code",[e._v("auth.jwt.secret")]),e._v(", "),s("code",[e._v("auth.jwt.pubkey")]),e._v(", "),s("code",[e._v("auth.jwt.jwks")]),e._v(".")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("DANGER")]),e._v(" "),s("p",[e._v("JWT contains authentication information by itself. Once leaked, anyone can get all the permissions of the token. It is recommended to enable TLS encrypted transmission when using JWT.")]),e._v(" "),s("p",[e._v("During the use of JWT, a token cannot be invalidated before it expires. Please properly set the validity time and keep the encryption information well.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);