(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{1571:function(e,t,s){"use strict";s.r(t);var n=s(10),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"multi-language-extension-protocol-access"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#multi-language-extension-protocol-access"}},[e._v("#")]),e._v(" Multi-language extension-protocol access")]),e._v(" "),n("p",[e._v("In EMQX Enterprise 4.2.0, we provide multi-language extension support. Among them, the "),n("strong",[e._v("Multilingual Extended Protocol Access")]),e._v(" module allows other programming languages ​​(such as Python, Java, etc.) to directly process byte data messages to achieve custom protocol analysis, and provides Pub/Sub interfaces to achieve message exchange with the system .")]),e._v(" "),n("p",[e._v("The scalability brought by this function to EMQX is very powerful. It can process any proprietary protocol in a programming language familiar to users, and enjoy the advantages of extremely high concurrent connections brought by the EMQX system.")]),e._v(" "),n("h2",{attrs:{id:"features"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[e._v("#")]),e._v(" Features")]),e._v(" "),n("p",[e._v("-Very strong expansion capability. Use gRPC as the RPC communication framework to support various mainstream programming languages\n-Fully asynchronous IO. The connection layer is implemented in a completely asynchronous non-blocking I/O way\n-The connection layer is transparent. Fully support TCP\\TLS UDP\\DTLS connection management, and provide a unified API for the upper layer\n-Connection management capabilities. For example, the maximum number of connections, rate limits for connections and throughput, IP blacklists, etc.")]),e._v(" "),n("h2",{attrs:{id:"architecture"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#architecture"}},[e._v("#")]),e._v(" Architecture")]),e._v(" "),n("p",[n("img",{attrs:{src:s(554),alt:"Extension-Protocol Arch"}})]),e._v(" "),n("p",[e._v("The main contents of this module include:")]),e._v(" "),n("ol",[n("li",[n("p",[n("strong",[e._v("Connection layer:")]),e._v(" This part mainly "),n("strong",[e._v("maintains the life cycle of Socket, and the sending and receiving of data")]),e._v(". Its functional requirements include:")]),e._v(" "),n("p",[e._v("-Listen to a port. When a new TCP/UDP connection arrives, a connection process is started to maintain the connection status.\n-Call the ʻOnSocketCreated"),n("code",[e._v("callback. Used to notify the external module that a new connection has been established**. -Call the ʻOnScoektClosed")]),e._v(" callback. Used to notify the external module that the connection is "),n("strong",[e._v("closed")]),e._v(".\n-Call the ʻOnReceivedBytes"),n("code",[e._v("callback. Used to notify the external module ** the newly received data packet for this connection**. -Provide")]),e._v("Send"),n("code",[e._v("interface. Called by external modules, **used to send data packets**. -Provide")]),e._v("Close` interface. Called by external modules, "),n("strong",[e._v("used to actively close the connection")]),e._v(".")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Protocol/session layer:")]),e._v(" This part mainly provides PUB/SUB interface** to realize message intercommunication with the EMQX Broker system. include:")]),e._v(" "),n("p",[e._v("-Provide ʻAuthenticate"),n("code",[e._v("interface. Used by external modules to register clients to the cluster. -Provide")]),e._v("StartTimer"),n("code",[e._v("interface. Called by external modules to start timers such as heartbeat for the connection process. -Provide")]),e._v("Publish"),n("code",[e._v("interface. Used by external modules to publish messages in EMQX Broker. -Provide the")]),e._v("Subscribe"),n("code",[e._v("interface. It is used by external modules to subscribe to a topic in order to receive certain downlink messages from EMQX Broker. -Provide the ʻUnsubscribe")]),e._v(" interface. Called by external modules to unsubscribe a topic.\n-Call the ʻOnTimerTimeout"),n("code",[e._v("callback. It is used to handle events that the timer expires. -Call the ʻOnReceivedMessages")]),e._v(" callback. Used to receive downlink messages (after subscribing to the topic successfully, if there is a message on the topic, this method will be called back)")])])]),e._v(" "),n("h2",{attrs:{id:"interface-design"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#interface-design"}},[e._v("#")]),e._v(" Interface design")]),e._v(" "),n("p",[e._v("From the gRPC perspective, ExProto will act as a client to send callback requests to the "),n("code",[e._v("ConnectionHandler")]),e._v(" service. At the same time, it will also serve as a server to provide "),n("code",[e._v("ConnectionAdapter")]),e._v(" services to external modules to provide various interface calls. As shown:")]),e._v(" "),n("p",[n("img",{attrs:{src:s(400),alt:"Extension Protocol gRPC Arch"}})]),e._v(" "),n("p",[e._v("For details, see: "),n("a",{attrs:{href:"https://github.com/emqx/emqx-exproto/blob/dev/e4.2.0/priv/protos/exproto.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("exproto.proto"),n("OutboundLink")],1),e._v(", for example, the definition of the interface is:")]),e._v(" "),n("div",{staticClass:"language-protobuff line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('syntax = "proto3";\n\npackage emqx.exproto.v1;\n\n// The Broker side serivce. It provides a set of APIs to\n// handle a protcol access\nservice ConnectionAdapter {\n\n  // - socket layer\n\n  rpc Send(SendBytesRequest) returns (CodeResponse) {};\n\n  rpc Close(CloseSocketRequest) returns (CodeResponse) {};\n\n  // - protocol layer\n\n  rpc Authenticate(AuthenticateRequest) returns (CodeResponse) {};\n\n  rpc StartTimer(TimerRequest) returns (CodeResponse) {};\n\n  // - pub/sub layer\n\n  rpc Publish(PublishRequest) returns (CodeResponse) {};\n\n  rpc Subscribe(SubscribeRequest) returns (CodeResponse) {};\n\n  rpc Unsubscribe(UnsubscribeRequest) returns (CodeResponse) {};\n}\n\nservice ConnectionHandler {\n\n  // - socket layer\n\n  rpc OnSocketCreated(SocketCreatedRequest) returns (EmptySuccess) {};\n\n  rpc OnSocketClosed(SocketClosedRequest) returns (EmptySuccess) {};\n\n  rpc OnReceivedBytes(ReceivedBytesRequest) returns (EmptySuccess) {};\n\n  // - pub/sub layer\n\n  rpc OnTimerTimeout(TimerTimeoutRequest) returns (EmptySuccess) {};\n\n  rpc OnReceivedMessages(ReceivedMessagesRequest) returns (EmptySuccess) {};\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br")])]),n("h2",{attrs:{id:"development-guide"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#development-guide"}},[e._v("#")]),e._v(" Development Guide")]),e._v(" "),n("p",[e._v("Before using this module, users need to develop and deploy a gRPC service and implement the interface defined by ʻexproto.proto`.")]),e._v(" "),n("p",[e._v("The steps are as follows:")]),e._v(" "),n("ol",[n("li",[e._v("Copy the current version of "),n("code",[e._v("lib/emqx_exproto-<x.y.z>/priv/protos/exproto.proto")]),e._v(" file.")]),e._v(" "),n("li",[e._v("Use the gRPC framework of the corresponding programming language to generate the gRPC server code of ʻexproto.proto`.")]),e._v(" "),n("li",[e._v("Implement the interface of the "),n("code",[e._v("ConnectionHandler")]),e._v(" service in exproto.proto.")])]),e._v(" "),n("p",[e._v("After the development is completed, the service needs to be deployed to a server that can communicate with EMQX, and the port is open.")]),e._v(" "),n("p",[e._v("The gRPC framework of each language can be referred to: "),n("a",{attrs:{href:"https://github.com/grpc-ecosystem/awesome-grpc",target:"_blank",rel:"noopener noreferrer"}},[e._v("grpc-ecosystem/awesome-grpc"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"create-module"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-module"}},[e._v("#")]),e._v(" Create module")]),e._v(" "),n("p",[e._v("After successfully deploying the gRPC service, you can open the multi-language extension protocol access module through the dashboard page, and configure the following three parts to use it successfully:")]),e._v(" "),n("ol",[n("li",[e._v("The listening address of ExProto's "),n("code",[e._v("ConnectionApdapter")]),e._v(" service. Used to receive gRPC requests.")]),e._v(" "),n("li",[e._v("Configure "),n("strong",[e._v("Listener (Listener)")]),e._v(" to provide TCP/UDP/SSL/DTLS address monitoring. Used to monitor and receive device connections.")]),e._v(" "),n("li",[e._v("Specify a service address of "),n("code",[e._v("ConnectionHandler")]),e._v(" for each listener. A service used to send various event callbacks to users.")])]),e._v(" "),n("p",[e._v("Open "),n("a",{attrs:{href:"http://127.0.0.1:18083/#/modules",target:"_blank",rel:"noopener noreferrer"}},[e._v("EMQX Dashboard"),n("OutboundLink")],1),e._v(', click the "Modules" tab on the left, and choose to add:')]),e._v(" "),n("p",[n("img",{attrs:{src:s(391),alt:"Modules"}})]),e._v(" "),n("p",[e._v('Select "Multilingual Extended Protocol Access":')]),e._v(" "),n("p",[n("img",{attrs:{src:s(555),alt:"Add ExProto Module"}})]),e._v(" "),n("p",[e._v("Configure the listening address of the "),n("code",[e._v("ConnectionAdapter")]),e._v(" service, and whether to enable SSL listening for it:")]),e._v(" "),n("p",[n("img",{attrs:{src:s(556),alt:"Configure ExProto gRPC Server"}})]),e._v(" "),n("p",[e._v('Click "Add Listener" to configure the listener for the ExProto module, including:')]),e._v(" "),n("ol",[n("li",[e._v("The listener's "),n("code",[e._v("listening address")]),e._v(" and "),n("code",[e._v("listening type")]),e._v(", which indicate how to receive the Socket connection of the custom protocol.")]),e._v(" "),n("li",[e._v("The "),n("code",[e._v("Handler Service Address")]),e._v(" of the ConnectionHandler and possible SSL certificate configuration, which indicate how ExProto accesses the ConnectionHandler service.")])]),e._v(" "),n("p",[n("img",{attrs:{src:s(557),alt:"Configure ExProto Listener"}})]),e._v(" "),n("p",[e._v("Click OK to complete the listener addition; click Add to complete the creation of the module:")]),e._v(" "),n("p",[n("img",{attrs:{src:s(558),alt:"Add ExProto Successfully"}})]),e._v(" "),n("p",[e._v("So far, the configuration of multi-language extended protocol access has been completed.")])])}),[],!1,null,null,null);t.default=r.exports},391:function(e,t,s){e.exports=s.p+"docs-assets/img/modules.1814040c.png"},400:function(e,t,s){e.exports=s.p+"docs-assets/img/exproto-grpc-arch.b6feed73.jpg"},554:function(e,t,s){e.exports=s.p+"docs-assets/img/exproto-arch.bffb1518.jpg"},555:function(e,t,s){e.exports=s.p+"docs-assets/img/exproto-add.88d9d0db.jpg"},556:function(e,t,s){e.exports=s.p+"docs-assets/img/exproto-conf-1.56d56afe.jpg"},557:function(e,t,s){e.exports=s.p+"docs-assets/img/exproto-conf-2.cf42c070.jpg"},558:function(e,t,s){e.exports=s.p+"docs-assets/img/exproto-succ.f4a38f7f.jpg"}}]);