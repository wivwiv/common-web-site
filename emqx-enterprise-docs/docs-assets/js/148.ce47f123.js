(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{1746:function(s,t,e){"use strict";e.r(t);var a=e(10),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"分布式集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式集群"}},[s._v("#")]),s._v(" 分布式集群")]),s._v(" "),a("h2",{attrs:{id:"erlang-otp-分布式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erlang-otp-分布式编程"}},[s._v("#")]),s._v(" Erlang/OTP 分布式编程")]),s._v(" "),a("p",[s._v("Erlang/OTP 最初是爱立信为开发电信设备系统设计的编程语言平台，电信设备(路由器、接入网关等)典型设计是通过背板连接主控板卡与多块业务板卡的分布式系统。")]),s._v(" "),a("p",[s._v("Erlang/OTP 语言平台的分布式程序，由分布互联的 Erlang 运行系统组成，每个 Erlang 运行系统被称为节点(Node)，节点(Node) 间通过 TCP 互联，消息传递的方式通信:")]),s._v(" "),a("p",[a("img",{attrs:{src:e(410),alt:""}})]),s._v(" "),a("h3",{attrs:{id:"节点-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点-node"}},[s._v("#")]),s._v(" 节点(Node)")]),s._v(" "),a("p",[s._v("Erlang 节点由唯一的节点名称标识，节点间通过名称进行通信寻址。 例如在本机启动四个 Erlang 节点，节点名称分别为:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("erl -name node1@127.0.0.1\nerl -name node2@127.0.0.1\nerl -name node3@127.0.0.1\nerl -name node4@127.0.0.1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("node1@127.0.0.1 控制台下建立与其他节点的连接:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" net_kernel:connect_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'node2@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" net_kernel:connect_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'node3@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("3")]),s._v(">")]),s._v(" net_kernel:connect_node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'node4@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("node1@127.0.0.1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("4")]),s._v(">")]),s._v(" nodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'node2@127.0.0.1'")]),s._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'node3@127.0.0.1'")]),s._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'node4@127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"emqx-分布集群设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#emqx-分布集群设计"}},[s._v("#")]),s._v(" EMQX 分布集群设计")]),s._v(" "),a("p",[s._v("EMQX 消息服务器集群基于 Erlang/OTP 分布式设计，集群原理可简述为下述两条规则:")]),s._v(" "),a("p",[s._v("MQTT 客户端订阅主题时，所在节点订阅成功后广播通知其他节点：某个主题(Topic)被本节点订阅。")]),s._v(" "),a("p",[s._v("MQTT 客户端发布消息时，所在节点会根据消息主题(Topic)，检索订阅并路由消息到相关节点。")]),s._v(" "),a("p",[s._v("EMQX 消息服务器同一集群的所有节点，都会复制一份主题(Topic) -> 节点(Node)映射的路由表，例如:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("topic1 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" node1, node2\ntopic2 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" node3\ntopic3 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" node2, node4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"主题树-topic-trie-与路由表-route-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主题树-topic-trie-与路由表-route-table"}},[s._v("#")]),s._v(" 主题树(Topic Trie)与路由表(Route Table)")]),s._v(" "),a("p",[s._v("EMQX 消息服务器每个集群节点，都保存一份主题树(Topic Trie)和路由表。")]),s._v(" "),a("p",[s._v("例如下述主题订阅关系:")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("客户端")]),s._v(" "),a("th",[s._v("节点")]),s._v(" "),a("th",[s._v("订阅主题")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("client1")]),s._v(" "),a("td",[s._v("node1")]),s._v(" "),a("td",[s._v("t/+/x, t/+/y")])]),s._v(" "),a("tr",[a("td",[s._v("client2")]),s._v(" "),a("td",[s._v("node2")]),s._v(" "),a("td",[s._v("t/#")])]),s._v(" "),a("tr",[a("td",[s._v("client3")]),s._v(" "),a("td",[s._v("node3")]),s._v(" "),a("td",[s._v("t/+/x, t/a")])])])]),s._v(" "),a("p",[s._v("最终会生成如下主题树(Topic Trie)和路由表(Route Table):")]),s._v(" "),a("p",[a("img",{attrs:{src:e(411),alt:""}})]),s._v(" "),a("h3",{attrs:{id:"订阅-subscription-与消息派发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#订阅-subscription-与消息派发"}},[s._v("#")]),s._v(" 订阅(Subscription)与消息派发")]),s._v(" "),a("p",[s._v("客户端的主题订阅(Subscription)关系，只保存在客户端所在节点，用于本节点内派发消息到客户端。")]),s._v(" "),a("p",[s._v("例如client1向主题’t/a’发布消息，消息在节点间的路由与派发流程:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("title: Message Route and Deliver\n\nclient1 -"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" node1: Publish"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("t/a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    node1 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" node2: Route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("t/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#]")]),s._v("\n        node2 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" client2: Deliver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("t/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#]")]),s._v("\n    node1 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" node3: Route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("t/a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        node3 --"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" client3: Deliver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("t/a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("img",{attrs:{src:e(397),alt:"_images/design_9.png"}})]),s._v(" "),a("h2",{attrs:{id:"节点发现与自动集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点发现与自动集群"}},[s._v("#")]),s._v(" 节点发现与自动集群")]),s._v(" "),a("p",[s._v("EMQX 支持基于 Ekka 库的集群自动发现 (Autocluster)。Ekka 是为 Erlang/OTP 应用开发的集群管理库，支持\nErlang 节点自动发现 (Service Discovery)、自动集群 (Autocluster)、脑裂自动愈合 (Network Partition\nAutoheal)、自动删除宕机节点 (Autoclean)。")]),s._v(" "),a("p",[s._v("EMQX 支持多种节点发现策略:")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("策略")]),s._v(" "),a("th",[s._v("说明")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("manual")]),s._v(" "),a("td",[s._v("手动命令创建集群")])]),s._v(" "),a("tr",[a("td",[s._v("static")]),s._v(" "),a("td",[s._v("静态节点列表自动集群")])]),s._v(" "),a("tr",[a("td",[s._v("mcast")]),s._v(" "),a("td",[s._v("UDP 组播方式自动集群")])]),s._v(" "),a("tr",[a("td",[s._v("dns")]),s._v(" "),a("td",[s._v("DNS A 记录自动集群")])]),s._v(" "),a("tr",[a("td",[s._v("etcd")]),s._v(" "),a("td",[s._v("通过 etcd 自动集群")])]),s._v(" "),a("tr",[a("td",[s._v("k8s")]),s._v(" "),a("td",[s._v("Kubernetes 服务自动集群")])])])]),s._v(" "),a("h3",{attrs:{id:"手动-manual-方式管理集群介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动-manual-方式管理集群介绍"}},[s._v("#")]),s._v(" 手动(manual) 方式管理集群介绍")]),s._v(" "),a("p",[s._v("假设要在两台服务器 s1.emqx.io, s2.emqx.io 上部署 EMQX 集群:")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("节点名")]),s._v(" "),a("th",[s._v("主机名 (FQDN)")]),s._v(" "),a("th",[s._v("IP 地址")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("emqx@s1.emqx.io 或 emqx@192.168.0.10")]),s._v(" "),a("td",[s._v("s1.emqx.io")]),s._v(" "),a("td",[s._v("192.168.0.10")])]),s._v(" "),a("tr",[a("td",[s._v("emqx@s2.emqx.io 或 emqx@192.168.0.20")]),s._v(" "),a("td",[s._v("s2.emqx.io")]),s._v(" "),a("td",[s._v("192.168.0.20")])])])]),s._v(" "),a("p",[a("strong",[s._v("注意：")]),s._v(" 节点名格式为 "),a("a",{attrs:{href:"mailto:Name@Host"}},[s._v("Name@Host")]),s._v(", Host 必须是 IP 地址或 FQDN (主机名。域名)")]),s._v(" "),a("h4",{attrs:{id:"配置-emqx-s1-emqx-io-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-emqx-s1-emqx-io-节点"}},[s._v("#")]),s._v(" 配置 emqx@s1.emqx.io 节点")]),s._v(" "),a("p",[s._v("emqx/etc/emqx.conf:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("node.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" emqx@s1.emqx.io\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或")]),s._v("\nnode.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" emqx@192.168.0.10\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("也可通过环境变量:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("EMQX_NODE_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("emqx@s1.emqx.io "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" ./bin/emqx start\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("注意:")]),s._v(" 节点启动加入集群后，节点名称不能变更。")]),s._v(" "),a("h4",{attrs:{id:"配置-emqx-s2-emqx-io-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-emqx-s2-emqx-io-节点"}},[s._v("#")]),s._v(" 配置 emqx@s2.emqx.io 节点")]),s._v(" "),a("p",[s._v("emqx/etc/emqx.conf:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("node.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" emqx@s2.emqx.io\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 或")]),s._v("\nnode.name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" emqx@192.168.0.20\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"节点加入集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点加入集群"}},[s._v("#")]),s._v(" 节点加入集群")]),s._v(" "),a("p",[s._v("启动两台节点后，在 s2.emqx.io 上执行:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ ./bin/emqx_ctl cluster "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),s._v(" emqx@s1.emqx.io\n\nJoin the cluster successfully.\nCluster status: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("running_nodes,"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'emqx@s1.emqx.io'")]),s._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'emqx@s2.emqx.io'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("注意:")]),s._v(" s2.emqx.io加入集群后会清除本身全部的数据，同步s1.emqx.io节点的数据。如果还有s3.emqx.io节点，那么需要在s3.emqx.io节点去执行命令加入emqx@s1.emqx.io或者emqx@s2.emqx.io， 已经在集群的节点不能在join到其他节点，否则会退出当前集群和join的节点组成一个新的集群")]),s._v(" "),a("p",[s._v("在任意节点上查询集群状态:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ ./bin/emqx_ctl cluster status\n\nCluster status: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("running_nodes,"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'emqx@s1.emqx.io'")]),s._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'emqx@s2.emqx.io'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"退出集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出集群"}},[s._v("#")]),s._v(" 退出集群")]),s._v(" "),a("p",[s._v("节点退出集群，两种方式:")]),s._v(" "),a("ol",[a("li",[s._v("leave: 让本节点退出集群")]),s._v(" "),a("li",[s._v("force-leave: 从集群删除其他节点")])]),s._v(" "),a("p",[s._v("让 emqx@s2.emqx.io 主动退出集群:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ ./bin/emqx_ctl cluster leave\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("或在 s1.emqx.io 上，从集群删除 emqx@s2.emqx.io 节点:")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ ./bin/emqx_ctl cluster force-leave emqx@s2.emqx.io\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",{attrs:{id:"单机伪分布式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单机伪分布式"}},[s._v("#")]),s._v(" 单机伪分布式")]),s._v(" "),a("p",[s._v("对于只有个人电脑或者一台服务器的用户来说，可以使用伪分布式集群。请注意，我们若要在单机上启动两个或多个 emqx 实例，为避免端口冲突，我们需要对其它节点的监听端口做出调整。")]),s._v(" "),a("p",[s._v("基本思路是复制一份 emqx 文件夹然后命名为 emqx2 ，将原先所有 emqx 节点监听的端口 port 加上一个偏移 offset 作为新的 emqx2 节点的监听端口。例如，将原先 emqx 的MQTT/TCP 监听端口由默认的 1883 改为了 2883 作为 emqx2 的 MQTT/TCP 监听端口。完成以上操作的自动化脚本可以参照 "),a("a",{attrs:{href:"https://github.com/terry-xiaoyu/one_more_emqx",target:"_blank",rel:"noopener noreferrer"}},[s._v("集群脚本"),a("OutboundLink")],1),s._v("，具体配置请参见 "),a("RouterLink",{attrs:{to:"/zh/enterprise/latest/getting-started/config.html"}},[s._v("配置说明")]),s._v(" 与 "),a("RouterLink",{attrs:{to:"/zh/enterprise/latest/configuration/configuration.html"}},[s._v("配置项")]),s._v("。")],1),s._v(" "),a("h2",{attrs:{id:"防火墙设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防火墙设置"}},[s._v("#")]),s._v(" 防火墙设置")]),s._v(" "),a("h3",{attrs:{id:"集群节点发现端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群节点发现端口"}},[s._v("#")]),s._v(" 集群节点发现端口")]),s._v(" "),a("p",[s._v("若预先设置了环境变量 WITH_EPMD=1, 启动 emqx 时会使用启动 epmd (监听端口 4369) 做节点发现。称为 "),a("code",[s._v("epmd 模式")]),s._v("。")]),s._v(" "),a("p",[s._v("若环境变量 WITH_EPMD 没有设置，则启动 emqx 时不启用 epmd，而使用 emqx ekka 的节点发现，这也是 4.0 之后的默认节点发现方式。称为 "),a("code",[s._v("ekka 模式")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("epmd 模式：")])]),s._v(" "),a("p",[s._v("如果集群节点间存在防火墙，防火墙需要为每个节点开通 TCP 4369 端口，用来让各节点能互相访问。")]),s._v(" "),a("p",[s._v("防火墙还需要开通一个 TCP 从 "),a("code",[s._v("node.dist_listen_min")]),s._v("(包含) 到 "),a("code",[s._v("node.dist_listen_max")]),s._v("(包含) 的端口段，\n这两个配置的默认值都是 "),a("code",[s._v("6369")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("ekka 模式（4.0 版本之后的默认模式）：")])]),s._v(" "),a("p",[s._v("跟"),a("code",[s._v("empd 模式")]),s._v("不同，在"),a("code",[s._v("ekka 模式")]),s._v("下，集群发现端口的映射关系是约定好的，而不是动态的。\n"),a("code",[s._v("node.dist_listen_min")]),s._v(" and "),a("code",[s._v("node.dist_listen_max")]),s._v(" 两个配置在"),a("code",[s._v("ekka 模式")]),s._v("下不起作用。")]),s._v(" "),a("p",[s._v("如果集群节点间存在防火墙，防火墙需要放开这个约定的端口。约定端口的规则如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ListeningPort = BasePort + Offset\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中 "),a("code",[s._v("BasePort")]),s._v(" 为 4370 (不可配置), "),a("code",[s._v("Offset")]),s._v(" 为节点名的数字后缀. 如果节点名没有数字后缀的话，\n"),a("code",[s._v("Offsset")]),s._v(" 为 0。")]),s._v(" "),a("p",[s._v("举例来说, 如果 "),a("code",[s._v("emqx.conf")]),s._v(" 里配置了节点名："),a("code",[s._v("node.name = emqx@192.168.0.12")]),s._v("，那么监听端口为 "),a("code",[s._v("4370")]),s._v("，\n但对于 "),a("code",[s._v("emqx1")]),s._v(" (或者 "),a("code",[s._v("emqx-1")]),s._v(") 端口就是 "),a("code",[s._v("4371")]),s._v("，以此类推。")]),s._v(" "),a("h3",{attrs:{id:"the-cluster-rpc-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-cluster-rpc-port"}},[s._v("#")]),s._v(" The Cluster RPC Port")]),s._v(" "),a("p",[s._v("每个节点还需要监听一个 RPC 端口，也需要被防火墙也放开。跟上面说的"),a("code",[s._v("ekka 模式")]),s._v("下的集群发现端口一样，这个 RPC 端口也是约定式的。")]),s._v(" "),a("p",[s._v("RPC 端口的规则跟"),a("code",[s._v("ekka 模式")]),s._v("下的集群发现端口类似，只不过 "),a("code",[s._v("BasePort = 5370")]),s._v("。")]),s._v(" "),a("p",[s._v("就是说，如果 "),a("code",[s._v("emqx.conf")]),s._v(" 里配置了节点名："),a("code",[s._v("node.name = emqx@192.168.0.12")]),s._v("，那么监听端口为 "),a("code",[s._v("5370")]),s._v("，\n但对于 "),a("code",[s._v("emqx1")]),s._v(" (或者 "),a("code",[s._v("emqx-1")]),s._v(") 端口就是 "),a("code",[s._v("5371")]),s._v("，以此类推。")])])}),[],!1,null,null,null);t.default=n.exports},397:function(s,t,e){s.exports=e.p+"docs-assets/img/design_9.46b9a10f.png"},410:function(s,t,e){s.exports=e.p+"docs-assets/img/cluster_1.7f2c87ef.png"},411:function(s,t,e){s.exports=e.p+"docs-assets/img/cluster_2.8a49ae02.png"}}]);